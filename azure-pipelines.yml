trigger:
  - terraform_storage_account

pool:
  vmImage: 'ubuntu-latest'

variables:
  subscription: SRVCONAPPAUTH
  resourceGroup: resourcegroup-tfstate
  storageAccount: terraformstaccountstate
  container: tfstate
  tfstateFile: terraform.tfstate
  location: westeurope

steps:

- script: echo Hello, world!
  displayName: 'Run a one-line script'
 
# Install Terraform
# Since using MS hosted agent, need to install the terraform and indicate the version.
- task: TerraformInstaller@0
  displayName: install terraform
  inputs:
    terraformVersion: latest
 
# Configure Azure Provider
# This is optional but just for debugging purposes and test the AzureCLI task
- task: AzureCLI@2
  condition: true
  inputs:
    azureSubscription: $(subscription)
    scriptType: 'pscore'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az account show
 
# Need to create a resource group for the solution to be deployed. 
# At the minimum need a resource group that is containing the essential storage account for the terraform statefile.
- task: AzureCLI@2
  displayName: 'Create resource group $(resourceGroup)'
  condition: true
  inputs:
    azureSubscription: $(subscription)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az group create -n $(resourceGroup) -l $(location)
 
# A storage account is needed to store the terraform statefile. 
# A Terraform state file is a # file that Terraform uses to store the state of the resources that it manages.
# The state file keeps track of the current state of the infrastructure, and Terraform uses this 
# information to determine the changes that need to be made to the infrastructure to bring it to the desired state.
# By placing it in a storage account, promotes collaboration so that other devops engineers can update and run the terraform code.
- task: AzureCLI@2
  displayName: 'Create storage account $(storageAccount) for terraform state files'
  condition: true
  inputs:
    azureSubscription: $(subscription)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az storage account create -n $(storageAccount) -g $(resourceGroup) -l $(location) --sku Standard_LRS



- task: AzureCLI@2
  displayName: 'Create container $(container) within storage account $(storage_account_name)'
  condition: true
  inputs:
    azureSubscription: $(subscription)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      storage_account_key=$(az storage account keys list --account-name $(storage_account_name) --resource-group $(resourceGroup) --query "[0].value" --output tsv)
      az storage container create --name $(container) --account-name $(storage_account_name) --account-key $storage_account_key

# We move to next part witch is init terrafom :
# Install files we need and prepare the place where to store state file 
# The state file contain the current state of cloud config
# We can put this file in own build machine 
# Or we can make it in a persistance and secure place like an azure storage 
# In sotrage acount i had create a container1. A container is like a storage space to stor files
#   
- task: TerraformTaskV1@0
  displayName: terraform init
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    backendServiceArm: '$(subscription)'
    backendAzureRmResourceGroupName: '$(resourceGroup)'
    backendAzureRmStorageAccountName: '$(storageAccount)'
    backendAzureRmContainerName: '$(container)'
    backendAzureRmKey: '$(tfstateFile)'

- task: TerraformTaskV1@0
  displayName: terraform plan -out=tfplan
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    commandOptions: '-out=tfplan'
    environmentServiceNameAzureRM: '$(subscription)'

- task: TerraformTaskV1@0
  displayName: terraform apply tfplan
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    commandOptions: 'tfplan'
    environmentServiceNameAzureRM: '$(subscription)'